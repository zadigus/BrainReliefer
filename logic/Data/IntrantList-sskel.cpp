// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "IntrantList-sskel.hpp"

namespace N_Data
{
  // Action_sskel
  //

  void Action_sskel::
  title_serializer (::xml_schema::string_sskel& s)
  {
    this->title_serializer_ = &s;
  }

  void Action_sskel::
  delegate_serializer (::xml_schema::string_sskel& s)
  {
    this->delegate_serializer_ = &s;
  }

  void Action_sskel::
  deadlineDate_serializer (::xml_schema::date_sskel& s)
  {
    this->deadlineDate_serializer_ = &s;
  }

  void Action_sskel::
  serializers (::xml_schema::string_sskel& title,
               ::xml_schema::string_sskel& delegate,
               ::xml_schema::date_sskel& deadlineDate)
  {
    this->title_serializer_ = &title;
    this->delegate_serializer_ = &delegate;
    this->deadlineDate_serializer_ = &deadlineDate;
  }

  Action_sskel::
  Action_sskel ()
  : Action_impl_ (0),
    title_serializer_ (0),
    delegate_serializer_ (0),
    deadlineDate_serializer_ (0)
  {
  }

  Action_sskel::
  Action_sskel (Action_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Action_impl_ (impl),
    title_serializer_ (0),
    delegate_serializer_ (0),
    deadlineDate_serializer_ (0)
  {
  }

  // ActionList_sskel
  //

  void ActionList_sskel::
  Action_serializer (::N_Data::Action_sskel& s)
  {
    this->Action_serializer_ = &s;
  }

  void ActionList_sskel::
  serializers (::N_Data::Action_sskel& Action)
  {
    this->Action_serializer_ = &Action;
  }

  ActionList_sskel::
  ActionList_sskel ()
  : ActionList_impl_ (0),
    Action_serializer_ (0)
  {
  }

  ActionList_sskel::
  ActionList_sskel (ActionList_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    ActionList_impl_ (impl),
    Action_serializer_ (0)
  {
  }

  // IntrantList_sskel
  //

  void IntrantList_sskel::
  Intrant_serializer (::N_Data::Intrant_sskel& s)
  {
    this->Intrant_serializer_ = &s;
  }

  void IntrantList_sskel::
  serializers (::N_Data::Intrant_sskel& Intrant)
  {
    this->Intrant_serializer_ = &Intrant;
  }

  IntrantList_sskel::
  IntrantList_sskel ()
  : IntrantList_impl_ (0),
    Intrant_serializer_ (0)
  {
  }

  IntrantList_sskel::
  IntrantList_sskel (IntrantList_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    IntrantList_impl_ (impl),
    Intrant_serializer_ (0)
  {
  }

  // Intrant_sskel
  //

  void Intrant_sskel::
  title_serializer (::xml_schema::string_sskel& s)
  {
    this->title_serializer_ = &s;
  }

  void Intrant_sskel::
  description_serializer (::xml_schema::string_sskel& s)
  {
    this->description_serializer_ = &s;
  }

  void Intrant_sskel::
  image_serializer (::xml_schema::string_sskel& s)
  {
    this->image_serializer_ = &s;
  }

  void Intrant_sskel::
  pdf_serializer (::xml_schema::string_sskel& s)
  {
    this->pdf_serializer_ = &s;
  }

  void Intrant_sskel::
  sound_serializer (::xml_schema::string_sskel& s)
  {
    this->sound_serializer_ = &s;
  }

  void Intrant_sskel::
  url_serializer (::xml_schema::string_sskel& s)
  {
    this->url_serializer_ = &s;
  }

  void Intrant_sskel::
  deadlineDate_serializer (::xml_schema::date_sskel& s)
  {
    this->deadlineDate_serializer_ = &s;
  }

  void Intrant_sskel::
  actions_serializer (::N_Data::ActionList_sskel& s)
  {
    this->actions_serializer_ = &s;
  }

  void Intrant_sskel::
  serializers (::xml_schema::string_sskel& title,
               ::xml_schema::string_sskel& description,
               ::xml_schema::string_sskel& image,
               ::xml_schema::string_sskel& pdf,
               ::xml_schema::string_sskel& sound,
               ::xml_schema::string_sskel& url,
               ::xml_schema::date_sskel& deadlineDate,
               ::N_Data::ActionList_sskel& actions)
  {
    this->title_serializer_ = &title;
    this->description_serializer_ = &description;
    this->image_serializer_ = &image;
    this->pdf_serializer_ = &pdf;
    this->sound_serializer_ = &sound;
    this->url_serializer_ = &url;
    this->deadlineDate_serializer_ = &deadlineDate;
    this->actions_serializer_ = &actions;
  }

  Intrant_sskel::
  Intrant_sskel ()
  : Intrant_impl_ (0),
    title_serializer_ (0),
    description_serializer_ (0),
    image_serializer_ (0),
    pdf_serializer_ (0),
    sound_serializer_ (0),
    url_serializer_ (0),
    deadlineDate_serializer_ (0),
    actions_serializer_ (0)
  {
  }

  Intrant_sskel::
  Intrant_sskel (Intrant_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Intrant_impl_ (impl),
    title_serializer_ (0),
    description_serializer_ (0),
    image_serializer_ (0),
    pdf_serializer_ (0),
    sound_serializer_ (0),
    url_serializer_ (0),
    deadlineDate_serializer_ (0),
    actions_serializer_ (0)
  {
  }
}

#include <assert.h>

namespace N_Data
{
  // Action_sskel
  //

  bool Action_sskel::
  delegate_present ()
  {
    return this->Action_impl_ ? this->Action_impl_->delegate_present () : false;
  }

  bool Action_sskel::
  deadlineDate_present ()
  {
    return this->Action_impl_ ? this->Action_impl_->deadlineDate_present () : false;
  }

  void Action_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->title_serializer_)
      this->title_serializer_->_reset ();

    if (this->delegate_serializer_)
      this->delegate_serializer_->_reset ();

    if (this->deadlineDate_serializer_)
      this->deadlineDate_serializer_->_reset ();

    this->resetting_ = false;
  }

  // ActionList_sskel
  //

  bool ActionList_sskel::
  Action_next ()
  {
    return this->ActionList_impl_ ? this->ActionList_impl_->Action_next () : false;
  }

  void ActionList_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Action_serializer_)
      this->Action_serializer_->_reset ();

    this->resetting_ = false;
  }

  // IntrantList_sskel
  //

  bool IntrantList_sskel::
  Intrant_next ()
  {
    return this->IntrantList_impl_ ? this->IntrantList_impl_->Intrant_next () : false;
  }

  void IntrantList_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Intrant_serializer_)
      this->Intrant_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Intrant_sskel
  //

  bool Intrant_sskel::
  description_present ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->description_present () : false;
  }

  bool Intrant_sskel::
  image_next ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->image_next () : false;
  }

  bool Intrant_sskel::
  pdf_next ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->pdf_next () : false;
  }

  bool Intrant_sskel::
  sound_next ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->sound_next () : false;
  }

  bool Intrant_sskel::
  url_next ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->url_next () : false;
  }

  bool Intrant_sskel::
  deadlineDate_present ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->deadlineDate_present () : false;
  }

  bool Intrant_sskel::
  actions_present ()
  {
    return this->Intrant_impl_ ? this->Intrant_impl_->actions_present () : false;
  }

  void Intrant_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->title_serializer_)
      this->title_serializer_->_reset ();

    if (this->description_serializer_)
      this->description_serializer_->_reset ();

    if (this->image_serializer_)
      this->image_serializer_->_reset ();

    if (this->pdf_serializer_)
      this->pdf_serializer_->_reset ();

    if (this->sound_serializer_)
      this->sound_serializer_->_reset ();

    if (this->url_serializer_)
      this->url_serializer_->_reset ();

    if (this->deadlineDate_serializer_)
      this->deadlineDate_serializer_->_reset ();

    if (this->actions_serializer_)
      this->actions_serializer_->_reset ();

    this->resetting_ = false;
  }
}

namespace N_Data
{
  // Element validation and serialization for Action_sskel.
  //
  void Action_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // title
    //
    {
      const ::std::string& r = this->title ();

      if (this->title_serializer_)
      {
        this->title_serializer_->pre (r);
        this->_start_element ("title");
        this->title_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->title_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->title_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->title_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->title_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // delegate
    //
    if (this->delegate_present ())
    {
      const ::std::string& r = this->delegate ();

      if (this->delegate_serializer_)
      {
        this->delegate_serializer_->pre (r);
        this->_start_element ("delegate");
        this->delegate_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->delegate_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->delegate_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->delegate_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->delegate_serializer_->post ();
      }
    }

    // deadlineDate
    //
    if (this->deadlineDate_present ())
    {
      const ::xml_schema::date& r = this->deadlineDate ();

      if (this->deadlineDate_serializer_)
      {
        this->deadlineDate_serializer_->pre (r);
        this->_start_element ("deadlineDate");
        this->deadlineDate_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->deadlineDate_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->deadlineDate_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->deadlineDate_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->deadlineDate_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for ActionList_sskel.
  //
  void ActionList_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Action
    //
    while (this->Action_next ())
    {
      const ::N_Data::Action& r = this->Action ();

      if (this->Action_serializer_)
      {
        this->Action_serializer_->pre (r);
        this->_start_element ("Action");
        this->Action_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Action_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Action_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Action_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Action_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for IntrantList_sskel.
  //
  void IntrantList_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Intrant
    //
    while (this->Intrant_next ())
    {
      const ::N_Data::Intrant& r = this->Intrant ();

      if (this->Intrant_serializer_)
      {
        this->Intrant_serializer_->pre (r);
        this->_start_element ("Intrant");
        this->Intrant_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Intrant_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Intrant_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Intrant_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Intrant_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Intrant_sskel.
  //
  void Intrant_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // title
    //
    {
      const ::std::string& r = this->title ();

      if (this->title_serializer_)
      {
        this->title_serializer_->pre (r);
        this->_start_element ("title");
        this->title_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->title_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->title_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->title_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->title_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // description
    //
    if (this->description_present ())
    {
      const ::std::string& r = this->description ();

      if (this->description_serializer_)
      {
        this->description_serializer_->pre (r);
        this->_start_element ("description");
        this->description_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->description_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->description_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->description_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->description_serializer_->post ();
      }
    }

    // image
    //
    while (this->image_next ())
    {
      const ::std::string& r = this->image ();

      if (this->image_serializer_)
      {
        this->image_serializer_->pre (r);
        this->_start_element ("image");
        this->image_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->image_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->image_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->image_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->image_serializer_->post ();
      }
    }

    // pdf
    //
    while (this->pdf_next ())
    {
      const ::std::string& r = this->pdf ();

      if (this->pdf_serializer_)
      {
        this->pdf_serializer_->pre (r);
        this->_start_element ("pdf");
        this->pdf_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->pdf_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->pdf_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->pdf_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->pdf_serializer_->post ();
      }
    }

    // sound
    //
    while (this->sound_next ())
    {
      const ::std::string& r = this->sound ();

      if (this->sound_serializer_)
      {
        this->sound_serializer_->pre (r);
        this->_start_element ("sound");
        this->sound_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->sound_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->sound_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->sound_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->sound_serializer_->post ();
      }
    }

    // url
    //
    while (this->url_next ())
    {
      const ::std::string& r = this->url ();

      if (this->url_serializer_)
      {
        this->url_serializer_->pre (r);
        this->_start_element ("url");
        this->url_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->url_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->url_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->url_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->url_serializer_->post ();
      }
    }

    // deadlineDate
    //
    if (this->deadlineDate_present ())
    {
      const ::xml_schema::date& r = this->deadlineDate ();

      if (this->deadlineDate_serializer_)
      {
        this->deadlineDate_serializer_->pre (r);
        this->_start_element ("deadlineDate");
        this->deadlineDate_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->deadlineDate_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->deadlineDate_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->deadlineDate_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->deadlineDate_serializer_->post ();
      }
    }

    // actions
    //
    if (this->actions_present ())
    {
      const ::N_Data::ActionList& r = this->actions ();

      if (this->actions_serializer_)
      {
        this->actions_serializer_->pre (r);
        this->_start_element ("actions");
        this->actions_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->actions_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->actions_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->actions_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->actions_serializer_->post ();
      }
    }
  }
}

namespace N_Data
{
}

// Begin epilogue.
//
//
// End epilogue.

