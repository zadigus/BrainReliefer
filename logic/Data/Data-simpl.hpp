// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef DATA_SIMPL_HPP
#define DATA_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define DATA_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "Data-sskel.hpp"

#include <xsde/cxx/stack.hxx>

namespace N_Data
{
  class RootDir_simpl: public RootDir_sskel
  {
    public:
    RootDir_simpl ();

    virtual void
    pre (const ::N_Data::RootDir&);

    public:
    ::xml_schema::string_simpl base_impl_;
  };

  class DataPath_simpl: public DataPath_sskel
  {
    public:
    DataPath_simpl ();

    virtual void
    pre (const ::N_Data::DataPath&);

    // Attributes.
    //
    virtual ::std::string
    name ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct DataPath_simpl_state
    {
      const ::N_Data::DataPath* DataPath_;
    };

    DataPath_simpl_state DataPath_simpl_state_;
  };

  class Data_simpl: public Data_sskel
  {
    public:
    virtual void
    pre (const ::N_Data::Data&);

    // Elements.
    //
    virtual const ::N_Data::RootDir&
    RootDir ();

    virtual bool
    DataPath_next ();

    virtual const ::N_Data::DataPath&
    DataPath ();

    public:
    struct Data_simpl_state
    {
      const ::N_Data::Data* Data_;
      ::N_Data::Data::DataPath_const_iterator DataPath_;
      ::N_Data::Data::DataPath_const_iterator DataPath_end_;
    };

    Data_simpl_state Data_simpl_state_;
  };
}

#ifdef DATA_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

namespace N_Data
{
  // Serializer aggregate for the Data element.
  //
  class Data_saggr
  {
    public:
    Data_saggr ();

    void
    pre (const ::N_Data::Data& x)
    {
      this->Data_s_.pre (x);
    }

    void
    post ()
    {
      this->Data_s_.post ();
    }

    ::N_Data::Data_simpl&
    root_serializer ()
    {
      return this->Data_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->Data_s_._reset ();
    }

    public:
    ::xml_schema::string_simpl string_s_;
    ::N_Data::RootDir_simpl RootDir_s_;
    ::N_Data::DataPath_simpl DataPath_s_;
    ::N_Data::Data_simpl Data_s_;
  };
}

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // DATA_SIMPL_HPP
