// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef INTRANT_LIST_PIMPL_HPP
#define INTRANT_LIST_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define INTRANT_LIST_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "IntrantList-pskel.hpp"

#include <xsde/cxx/stack.hxx>

namespace N_Data
{
  class Action_pimpl: public Action_pskel
  {
    public:
    virtual void
    pre ();

    // Elements.
    //
    virtual void
    title (const ::std::string&);

    virtual void
    delegate (const ::std::string&);

    virtual void
    deadlineDate (const ::xml_schema::date&);

    virtual ::N_Data::Action
    post_Action ();

    public:
    struct Action_pimpl_state
    {
      ::N_Data::Action Action_;
    };

    Action_pimpl_state Action_pimpl_state_;
  };

  class ActionList_pimpl: public ActionList_pskel
  {
    public:
    ActionList_pimpl (bool = false);

    ~ActionList_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    Action (const ::N_Data::Action&);

    virtual ::N_Data::ActionList*
    post_ActionList ();

    public:
    void
    pre_impl (::N_Data::ActionList*);

    public:
    struct ActionList_pimpl_state
    {
      ::N_Data::ActionList* ActionList_;
    };

    ActionList_pimpl_state ActionList_pimpl_state_;
    bool ActionList_pimpl_base_;
  };

  class IntrantList_pimpl: public IntrantList_pskel
  {
    public:
    IntrantList_pimpl (bool = false);

    ~IntrantList_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    Intrant (::N_Data::Intrant*);

    virtual ::N_Data::IntrantList*
    post_IntrantList ();

    public:
    void
    pre_impl (::N_Data::IntrantList*);

    public:
    struct IntrantList_pimpl_state
    {
      ::N_Data::IntrantList* IntrantList_;
    };

    IntrantList_pimpl_state IntrantList_pimpl_state_;
    bool IntrantList_pimpl_base_;
  };

  class Intrant_pimpl: public Intrant_pskel
  {
    public:
    Intrant_pimpl (bool = false);

    ~Intrant_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    title (const ::std::string&);

    virtual void
    description (const ::std::string&);

    virtual void
    image (const ::std::string&);

    virtual void
    pdf (const ::std::string&);

    virtual void
    sound (const ::std::string&);

    virtual void
    url (const ::std::string&);

    virtual void
    deadlineDate (const ::xml_schema::date&);

    virtual void
    actions (::N_Data::ActionList*);

    virtual ::N_Data::Intrant*
    post_Intrant ();

    public:
    void
    pre_impl (::N_Data::Intrant*);

    public:
    struct Intrant_pimpl_state
    {
      ::N_Data::Intrant* Intrant_;
    };

    Intrant_pimpl_state Intrant_pimpl_state_;
    bool Intrant_pimpl_base_;
  };
}

#ifdef INTRANT_LIST_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

namespace N_Data
{
  // Parser aggregate for the IntrantList element.
  //
  class IntrantList_paggr
  {
    public:
    IntrantList_paggr ();

    void
    pre ()
    {
      this->IntrantList_p_.pre ();
    }

    ::N_Data::IntrantList*
    post ()
    {
      return this->IntrantList_p_.post_IntrantList ();
    }

    ::N_Data::IntrantList_pimpl&
    root_parser ()
    {
      return this->IntrantList_p_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->IntrantList_p_._reset ();
    }

    public:
    ::N_Data::Action_pimpl Action_p_;
    ::xml_schema::date_pimpl date_p_;
    ::N_Data::ActionList_pimpl ActionList_p_;
    ::N_Data::Intrant_pimpl Intrant_p_;
    ::N_Data::IntrantList_pimpl IntrantList_p_;
    ::xml_schema::string_pimpl string_p_;
  };
}

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // INTRANT_LIST_PIMPL_HPP
