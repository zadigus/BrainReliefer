// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "Data.hpp"

namespace N_Data
{
  // RootDir
  //

  // DataPath
  //

  const ::std::string& DataPath::
  name () const
  {
    return this->name_;
  }

  ::std::string& DataPath::
  name ()
  {
    return this->name_;
  }

  void DataPath::
  name (const ::std::string& x)
  {
    this->name_ = x;
  }

  // Data
  //

  const ::N_Data::RootDir& Data::
  RootDir () const
  {
    return this->RootDir_;
  }

  ::N_Data::RootDir& Data::
  RootDir ()
  {
    return this->RootDir_;
  }

  void Data::
  RootDir (const ::N_Data::RootDir& x)
  {
    this->RootDir_ = x;
  }

  const Data::DataPath_sequence& Data::
  DataPath () const
  {
    return this->DataPath_;
  }

  Data::DataPath_sequence& Data::
  DataPath ()
  {
    return this->DataPath_;
  }
}

#include <stdlib.h>
#include <new>

namespace N_Data
{
  // RootDir
  //

  RootDir::
  RootDir ()
  {
  }

  // DataPath
  //

  DataPath::
  DataPath ()
  {
  }

  DataPath::
  ~DataPath ()
  {
  }

  DataPath::
  DataPath (const DataPath& x)
  : ::std::string (x)
  {
    XSDE_UNUSED (x);
    this->name_ = x.name_;
  }

  DataPath& DataPath::
  operator= (const DataPath& x)
  {
    XSDE_UNUSED (x);
    static_cast< ::std::string& > (*this) = x;
    this->name_ = x.name_;
    return *this;
  }

  // Data
  //

  Data::
  Data ()
  {
  }

  Data::
  ~Data ()
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

