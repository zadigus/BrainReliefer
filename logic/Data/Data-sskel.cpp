// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "Data-sskel.hpp"

namespace N_Data
{
  // RootDir_sskel
  //

  RootDir_sskel::
  RootDir_sskel (::xml_schema::string_sskel* tiein)
  : ::xml_schema::string_sskel (tiein, 0),
    RootDir_impl_ (0)
  {
  }

  RootDir_sskel::
  RootDir_sskel (RootDir_sskel* impl, void*)
  : ::xml_schema::string_sskel (impl, 0),
    RootDir_impl_ (impl)
  {
  }

  // DataPath_sskel
  //

  void DataPath_sskel::
  name_serializer (::xml_schema::string_sskel& name)
  {
    this->name_serializer_ = &name;
  }

  void DataPath_sskel::
  serializers (::xml_schema::string_sskel& name)
  {
    this->name_serializer_ = &name;
  }

  DataPath_sskel::
  DataPath_sskel (::xml_schema::string_sskel* tiein)
  : ::xml_schema::string_sskel (tiein, 0),
    DataPath_impl_ (0),
    name_serializer_ (0)
  {
  }

  DataPath_sskel::
  DataPath_sskel (DataPath_sskel* impl, void*)
  : ::xml_schema::string_sskel (impl, 0),
    DataPath_impl_ (impl),
    name_serializer_ (0)
  {
  }

  // Data_sskel
  //

  void Data_sskel::
  RootDir_serializer (::N_Data::RootDir_sskel& s)
  {
    this->RootDir_serializer_ = &s;
  }

  void Data_sskel::
  DataPath_serializer (::N_Data::DataPath_sskel& s)
  {
    this->DataPath_serializer_ = &s;
  }

  void Data_sskel::
  serializers (::N_Data::RootDir_sskel& RootDir,
               ::N_Data::DataPath_sskel& DataPath)
  {
    this->RootDir_serializer_ = &RootDir;
    this->DataPath_serializer_ = &DataPath;
  }

  Data_sskel::
  Data_sskel ()
  : Data_impl_ (0),
    RootDir_serializer_ (0),
    DataPath_serializer_ (0)
  {
  }

  Data_sskel::
  Data_sskel (Data_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Data_impl_ (impl),
    RootDir_serializer_ (0),
    DataPath_serializer_ (0)
  {
  }
}

#include <assert.h>

namespace N_Data
{
  // RootDir_sskel
  //

  void RootDir_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // DataPath_sskel
  //

  void DataPath_sskel::
  _reset ()
  {
    typedef ::xml_schema::string_sskel base;
    base::_reset ();

    if (this->name_serializer_)
      this->name_serializer_->_reset ();
  }

  void DataPath_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // Data_sskel
  //

  bool Data_sskel::
  DataPath_next ()
  {
    return this->Data_impl_ ? this->Data_impl_->DataPath_next () : false;
  }

  void Data_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->RootDir_serializer_)
      this->RootDir_serializer_->_reset ();

    if (this->DataPath_serializer_)
      this->DataPath_serializer_->_reset ();

    this->resetting_ = false;
  }
}

namespace N_Data
{
  // Element validation and serialization for Data_sskel.
  //
  void Data_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // RootDir
    //
    {
      const ::N_Data::RootDir& r = this->RootDir ();

      if (this->RootDir_serializer_)
      {
        this->RootDir_serializer_->pre (r);
        this->_start_element ("RootDir");
        this->RootDir_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->RootDir_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->RootDir_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->RootDir_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->RootDir_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // DataPath
    //
    while (this->DataPath_next ())
    {
      const ::N_Data::DataPath& r = this->DataPath ();

      if (this->DataPath_serializer_)
      {
        this->DataPath_serializer_->pre (r);
        this->_start_element ("DataPath");
        this->DataPath_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->DataPath_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->DataPath_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->DataPath_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->DataPath_serializer_->post ();
      }
    }
  }
}

namespace N_Data
{
  // Attribute validation and serialization for DataPath_sskel.
  //
  void DataPath_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::string_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // name
    //
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_attribute ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
        return;
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

