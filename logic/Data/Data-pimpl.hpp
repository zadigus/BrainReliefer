// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef DATA_PIMPL_HPP
#define DATA_PIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define DATA_PIMPL_HPP_CLEAR_OMIT_PAGGR
#endif

#include "Data-pskel.hpp"

#include <xsde/cxx/stack.hxx>

namespace N_Data
{
  class RootDir_pimpl: public RootDir_pskel
  {
    public:
    RootDir_pimpl ();

    virtual void
    pre ();

    virtual ::N_Data::RootDir
    post_RootDir ();

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct RootDir_pimpl_state
    {
      ::N_Data::RootDir RootDir_;
    };

    RootDir_pimpl_state RootDir_pimpl_state_;
  };

  class DataPath_pimpl: public DataPath_pskel
  {
    public:
    DataPath_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    name (const ::std::string&);

    virtual ::N_Data::DataPath
    post_DataPath ();

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct DataPath_pimpl_state
    {
      ::N_Data::DataPath DataPath_;
    };

    DataPath_pimpl_state DataPath_pimpl_state_;
  };

  class Data_pimpl: public Data_pskel
  {
    public:
    Data_pimpl (bool = false);

    ~Data_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    RootDir (const ::N_Data::RootDir&);

    virtual void
    DataPath (const ::N_Data::DataPath&);

    virtual ::N_Data::Data*
    post_Data ();

    public:
    void
    pre_impl (::N_Data::Data*);

    public:
    struct Data_pimpl_state
    {
      ::N_Data::Data* Data_;
    };

    Data_pimpl_state Data_pimpl_state_;
    bool Data_pimpl_base_;
  };
}

#ifdef DATA_PIMPL_HPP_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

namespace N_Data
{
  // Parser aggregate for the Data element.
  //
  class Data_paggr
  {
    public:
    Data_paggr ();

    void
    pre ()
    {
      this->Data_p_.pre ();
    }

    ::N_Data::Data*
    post ()
    {
      return this->Data_p_.post_Data ();
    }

    ::N_Data::Data_pimpl&
    root_parser ()
    {
      return this->Data_p_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->Data_p_._reset ();
    }

    public:
    ::xml_schema::string_pimpl string_p_;
    ::N_Data::RootDir_pimpl RootDir_p_;
    ::N_Data::DataPath_pimpl DataPath_p_;
    ::N_Data::Data_pimpl Data_p_;
  };
}

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // DATA_PIMPL_HPP
