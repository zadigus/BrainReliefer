// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Application.hpp"

namespace N_ApplicationData
{
  // Application
  // 

  const Application::Log_type& Application::
  Log () const
  {
    return this->Log_.get ();
  }

  Application::Log_type& Application::
  Log ()
  {
    return this->Log_.get ();
  }

  void Application::
  Log (const Log_type& x)
  {
    this->Log_.set (x);
  }

  void Application::
  Log (::std::unique_ptr< Log_type > x)
  {
    this->Log_.set (std::move (x));
  }

  const Application::Settings_type& Application::
  Settings () const
  {
    return this->Settings_.get ();
  }

  Application::Settings_type& Application::
  Settings ()
  {
    return this->Settings_.get ();
  }

  void Application::
  Settings (const Settings_type& x)
  {
    this->Settings_.set (x);
  }

  void Application::
  Settings (::std::unique_ptr< Settings_type > x)
  {
    this->Settings_.set (std::move (x));
  }


  // Filename
  // 


  // Mode
  // 


  // Log
  // 

  const Log::Filename_type& Log::
  Filename () const
  {
    return this->Filename_.get ();
  }

  Log::Filename_type& Log::
  Filename ()
  {
    return this->Filename_.get ();
  }

  void Log::
  Filename (const Filename_type& x)
  {
    this->Filename_.set (x);
  }

  void Log::
  Filename (::std::unique_ptr< Filename_type > x)
  {
    this->Filename_.set (std::move (x));
  }

  const Log::Mode_optional& Log::
  Mode () const
  {
    return this->Mode_;
  }

  Log::Mode_optional& Log::
  Mode ()
  {
    return this->Mode_;
  }

  void Log::
  Mode (const Mode_type& x)
  {
    this->Mode_.set (x);
  }

  void Log::
  Mode (const Mode_optional& x)
  {
    this->Mode_ = x;
  }

  void Log::
  Mode (::std::unique_ptr< Mode_type > x)
  {
    this->Mode_.set (std::move (x));
  }


  // Settings
  // 

  const Settings::Filename_optional& Settings::
  Filename () const
  {
    return this->Filename_;
  }

  Settings::Filename_optional& Settings::
  Filename ()
  {
    return this->Filename_;
  }

  void Settings::
  Filename (const Filename_type& x)
  {
    this->Filename_.set (x);
  }

  void Settings::
  Filename (const Filename_optional& x)
  {
    this->Filename_ = x;
  }

  void Settings::
  Filename (::std::unique_ptr< Filename_type > x)
  {
    this->Filename_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace N_ApplicationData
{
  // Application
  //

  Application::
  Application (const Log_type& Log,
               const Settings_type& Settings)
  : ::xml_schema::type (),
    Log_ (Log, this),
    Settings_ (Settings, this)
  {
  }

  Application::
  Application (::std::unique_ptr< Log_type > Log,
               ::std::unique_ptr< Settings_type > Settings)
  : ::xml_schema::type (),
    Log_ (std::move (Log), this),
    Settings_ (std::move (Settings), this)
  {
  }

  Application::
  Application (const Application& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Log_ (x.Log_, f, this),
    Settings_ (x.Settings_, f, this)
  {
  }

  Application::
  Application (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Log_ (this),
    Settings_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Application::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Log
      //
      if (n.name () == "Log" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Log_type > r (
          Log_traits::create (i, f, this));

        if (!Log_.present ())
        {
          this->Log_.set (::std::move (r));
          continue;
        }
      }

      // Settings
      //
      if (n.name () == "Settings" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Settings_type > r (
          Settings_traits::create (i, f, this));

        if (!Settings_.present ())
        {
          this->Settings_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Log_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Log",
        "");
    }

    if (!Settings_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Settings",
        "");
    }
  }

  Application* Application::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Application (*this, f, c);
  }

  Application& Application::
  operator= (const Application& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->Log_ = x.Log_;
      this->Settings_ = x.Settings_;
    }

    return *this;
  }

  Application::
  ~Application ()
  {
  }

  // Filename
  //

  Filename::
  Filename ()
  : ::xml_schema::string ()
  {
  }

  Filename::
  Filename (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  Filename::
  Filename (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  Filename::
  Filename (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  Filename::
  Filename (const Filename& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  Filename::
  Filename (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  Filename::
  Filename (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  Filename::
  Filename (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  Filename* Filename::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Filename (*this, f, c);
  }

  Filename::
  ~Filename ()
  {
  }

  // Mode
  //

  Mode::
  Mode ()
  : ::xml_schema::string ()
  {
  }

  Mode::
  Mode (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  Mode::
  Mode (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  Mode::
  Mode (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  Mode::
  Mode (const Mode& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  Mode::
  Mode (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  Mode::
  Mode (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  Mode::
  Mode (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  Mode* Mode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Mode (*this, f, c);
  }

  Mode::
  ~Mode ()
  {
  }

  // Log
  //

  Log::
  Log (const Filename_type& Filename)
  : ::xml_schema::type (),
    Filename_ (Filename, this),
    Mode_ (this)
  {
  }

  Log::
  Log (const Log& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Filename_ (x.Filename_, f, this),
    Mode_ (x.Mode_, f, this)
  {
  }

  Log::
  Log (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Filename_ (this),
    Mode_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Log::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Filename
      //
      if (n.name () == "Filename" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Filename_type > r (
          Filename_traits::create (i, f, this));

        if (!Filename_.present ())
        {
          this->Filename_.set (::std::move (r));
          continue;
        }
      }

      // Mode
      //
      if (n.name () == "Mode" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Mode_type > r (
          Mode_traits::create (i, f, this));

        if (!this->Mode_)
        {
          this->Mode_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Filename_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Filename",
        "");
    }
  }

  Log* Log::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Log (*this, f, c);
  }

  Log& Log::
  operator= (const Log& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->Filename_ = x.Filename_;
      this->Mode_ = x.Mode_;
    }

    return *this;
  }

  Log::
  ~Log ()
  {
  }

  // Settings
  //

  Settings::
  Settings ()
  : ::xml_schema::type (),
    Filename_ (this)
  {
  }

  Settings::
  Settings (const Settings& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Filename_ (x.Filename_, f, this)
  {
  }

  Settings::
  Settings (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Filename_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Settings::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Filename
      //
      if (n.name () == "Filename" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Filename_type > r (
          Filename_traits::create (i, f, this));

        if (!this->Filename_)
        {
          this->Filename_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  Settings* Settings::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Settings (*this, f, c);
  }

  Settings& Settings::
  operator= (const Settings& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->Filename_ = x.Filename_;
    }

    return *this;
  }

  Settings::
  ~Settings ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace N_ApplicationData
{
  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::N_ApplicationData::Application > (
      ::N_ApplicationData::Application_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::N_ApplicationData::Application > (
      ::N_ApplicationData::Application_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::N_ApplicationData::Application > (
      ::N_ApplicationData::Application_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::N_ApplicationData::Application_ (isrc, f, p);
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::N_ApplicationData::Application_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::N_ApplicationData::Application_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::N_ApplicationData::Application_ (isrc, f, p);
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::N_ApplicationData::Application_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::N_ApplicationData::Application_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::N_ApplicationData::Application > (
      ::N_ApplicationData::Application_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::N_ApplicationData::Application > (
      ::N_ApplicationData::Application_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::N_ApplicationData::Application > (
      ::N_ApplicationData::Application_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::N_ApplicationData::Application > (
        ::N_ApplicationData::Application_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Application" &&
        n.namespace_ () == "")
    {
      ::std::unique_ptr< ::N_ApplicationData::Application > r (
        ::xsd::cxx::tree::traits< ::N_ApplicationData::Application, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Application",
      "");
  }

  ::std::unique_ptr< ::N_ApplicationData::Application >
  Application_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Application" &&
        n.namespace_ () == "")
    {
      ::std::unique_ptr< ::N_ApplicationData::Application > r (
        ::xsd::cxx::tree::traits< ::N_ApplicationData::Application, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Application",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace N_ApplicationData
{
  void
  operator<< (::xercesc::DOMElement& e, const Application& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Log
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Log",
          e));

      s << i.Log ();
    }

    // Settings
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Settings",
          e));

      s << i.Settings ();
    }
  }

  void
  Application_ (::std::ostream& o,
                const ::N_ApplicationData::Application& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::N_ApplicationData::Application_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Application_ (::std::ostream& o,
                const ::N_ApplicationData::Application& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::N_ApplicationData::Application_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application_ (::std::ostream& o,
                const ::N_ApplicationData::Application& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::N_ApplicationData::Application_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application_ (::xercesc::XMLFormatTarget& t,
                const ::N_ApplicationData::Application& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::N_ApplicationData::Application_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Application_ (::xercesc::XMLFormatTarget& t,
                const ::N_ApplicationData::Application& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::N_ApplicationData::Application_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application_ (::xercesc::XMLFormatTarget& t,
                const ::N_ApplicationData::Application& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::N_ApplicationData::Application_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application_ (::xercesc::DOMDocument& d,
                const ::N_ApplicationData::Application& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Application" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Application",
        "");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  Application_ (const ::N_ApplicationData::Application& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "Application",
        "",
        m, f));

    ::N_ApplicationData::Application_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const Filename& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const Filename& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const Filename& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Mode& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const Mode& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const Mode& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Log& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Filename
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filename",
          e));

      s << i.Filename ();
    }

    // Mode
    //
    if (i.Mode ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Mode",
          e));

      s << *i.Mode ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Settings& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Filename
    //
    if (i.Filename ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Filename",
          e));

      s << *i.Filename ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

