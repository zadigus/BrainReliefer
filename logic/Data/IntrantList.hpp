// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef INTRANT_LIST_HPP
#define INTRANT_LIST_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include <string>
#include <xsde/cxx/hybrid/xml-schema.hxx>
#include <xsde/cxx/hybrid/sequence.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;
  typedef ::std::string any_simple_type;

  typedef signed char byte;
  using ::xsde::cxx::hybrid::byte_base;

  typedef unsigned char unsigned_byte;
  using ::xsde::cxx::hybrid::unsigned_byte_base;

  typedef short short_;
  using ::xsde::cxx::hybrid::short_base;

  typedef unsigned short unsigned_short;
  using ::xsde::cxx::hybrid::unsigned_short_base;

  typedef int int_;
  using ::xsde::cxx::hybrid::int_base;

  typedef unsigned int unsigned_int;
  using ::xsde::cxx::hybrid::unsigned_int_base;

  typedef long long long_;
  using ::xsde::cxx::hybrid::long_base;

  typedef unsigned long long unsigned_long;
  using ::xsde::cxx::hybrid::unsigned_long_base;

  typedef long integer;
  using ::xsde::cxx::hybrid::integer_base;

  typedef long non_positive_integer;
  using ::xsde::cxx::hybrid::non_positive_integer_base;

  typedef unsigned long non_negative_integer;
  using ::xsde::cxx::hybrid::non_negative_integer_base;

  typedef unsigned long positive_integer;
  using ::xsde::cxx::hybrid::positive_integer_base;

  typedef long negative_integer;
  using ::xsde::cxx::hybrid::negative_integer_base;

  typedef bool boolean;
  using ::xsde::cxx::hybrid::boolean_base;

  typedef float float_;
  using ::xsde::cxx::hybrid::float_base;

  typedef double double_;
  using ::xsde::cxx::hybrid::double_base;

  typedef double decimal;
  using ::xsde::cxx::hybrid::decimal_base;

  typedef ::std::string string;

  typedef ::std::string normalized_string;

  typedef ::std::string token;

  typedef ::std::string name;

  typedef ::std::string nmtoken;

  typedef ::xsde::cxx::string_sequence nmtokens;

  typedef ::std::string ncname;

  typedef ::std::string language;

  typedef ::std::string id;

  typedef ::std::string idref;

  typedef ::xsde::cxx::string_sequence idrefs;

  typedef ::std::string uri;

  using ::xsde::cxx::qname;

  using ::xsde::cxx::buffer;
  typedef ::xsde::cxx::buffer base64_binary;
  typedef ::xsde::cxx::buffer hex_binary;

  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::date;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::time;

  using ::xsde::cxx::hybrid::pod_sequence;
  using ::xsde::cxx::hybrid::fix_sequence;
  using ::xsde::cxx::hybrid::var_sequence;
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::hybrid::data_sequence;
}

namespace N_Data
{
  class Action;
  class ActionList;
  class IntrantList;
  class Intrant;
}


namespace N_Data
{
  // Action (fixed-length)
  //
  class Action
  {
    public:
    Action ();

    Action (const Action&);
    Action& operator= (const Action&);

    ~Action ();

    // title
    //
    const ::std::string&
    title () const;

    ::std::string&
    title ();

    void
    title (const ::std::string&);

    // delegate
    //
    bool
    delegate_present () const;

    void
    delegate_present (bool);

    const ::std::string&
    delegate () const;

    ::std::string&
    delegate ();

    void
    delegate (const ::std::string&);

    // deadlineDate
    //
    bool
    deadlineDate_present () const;

    void
    deadlineDate_present (bool);

    const ::xml_schema::date&
    deadlineDate () const;

    ::xml_schema::date&
    deadlineDate ();

    void
    deadlineDate (const ::xml_schema::date&);

    private:
    ::std::string title_;
    ::std::string delegate_;
    unsigned char delegate_present_;
    ::xml_schema::date deadlineDate_;
    unsigned char deadlineDate_present_;
  };

  // ActionList (variable-length)
  //
  class ActionList
  {
    private:
    ActionList (const ActionList&);
    ActionList& operator= (const ActionList&);

    public:
    ActionList ();

    ~ActionList ();

    // Action
    //
    typedef ::xsde::cxx::hybrid::fix_sequence< ::N_Data::Action > Action_sequence;
    typedef Action_sequence::iterator Action_iterator;
    typedef Action_sequence::const_iterator Action_const_iterator;

    const Action_sequence&
    Action () const;

    Action_sequence&
    Action ();

    private:
    Action_sequence Action_;
  };

  // IntrantList (variable-length)
  //
  class IntrantList
  {
    private:
    IntrantList (const IntrantList&);
    IntrantList& operator= (const IntrantList&);

    public:
    IntrantList ();

    ~IntrantList ();

    // Intrant
    //
    typedef ::xsde::cxx::hybrid::var_sequence< ::N_Data::Intrant > Intrant_sequence;
    typedef Intrant_sequence::iterator Intrant_iterator;
    typedef Intrant_sequence::const_iterator Intrant_const_iterator;

    const Intrant_sequence&
    Intrant () const;

    Intrant_sequence&
    Intrant ();

    private:
    Intrant_sequence Intrant_;
  };

  // Intrant (variable-length)
  //
  class Intrant
  {
    private:
    Intrant (const Intrant&);
    Intrant& operator= (const Intrant&);

    public:
    Intrant ();

    ~Intrant ();

    // title
    //
    const ::std::string&
    title () const;

    ::std::string&
    title ();

    void
    title (const ::std::string&);

    // description
    //
    bool
    description_present () const;

    void
    description_present (bool);

    const ::std::string&
    description () const;

    ::std::string&
    description ();

    void
    description (const ::std::string&);

    // image
    //
    typedef ::xsde::cxx::string_sequence image_sequence;
    typedef image_sequence::iterator image_iterator;
    typedef image_sequence::const_iterator image_const_iterator;

    const image_sequence&
    image () const;

    image_sequence&
    image ();

    // pdf
    //
    typedef ::xsde::cxx::string_sequence pdf_sequence;
    typedef pdf_sequence::iterator pdf_iterator;
    typedef pdf_sequence::const_iterator pdf_const_iterator;

    const pdf_sequence&
    pdf () const;

    pdf_sequence&
    pdf ();

    // sound
    //
    typedef ::xsde::cxx::string_sequence sound_sequence;
    typedef sound_sequence::iterator sound_iterator;
    typedef sound_sequence::const_iterator sound_const_iterator;

    const sound_sequence&
    sound () const;

    sound_sequence&
    sound ();

    // url
    //
    typedef ::xsde::cxx::string_sequence url_sequence;
    typedef url_sequence::iterator url_iterator;
    typedef url_sequence::const_iterator url_const_iterator;

    const url_sequence&
    url () const;

    url_sequence&
    url ();

    // deadlineDate
    //
    bool
    deadlineDate_present () const;

    void
    deadlineDate_present (bool);

    const ::xml_schema::date&
    deadlineDate () const;

    ::xml_schema::date&
    deadlineDate ();

    void
    deadlineDate (const ::xml_schema::date&);

    // actions
    //
    bool
    actions_present () const;

    const ::N_Data::ActionList&
    actions () const;

    ::N_Data::ActionList&
    actions ();

    void
    actions (::N_Data::ActionList*);

    private:
    ::std::string title_;
    ::std::string description_;
    unsigned char description_present_;
    image_sequence image_;
    pdf_sequence pdf_;
    sound_sequence sound_;
    url_sequence url_;
    ::xml_schema::date deadlineDate_;
    unsigned char deadlineDate_present_;
    ::N_Data::ActionList* actions_;
  };
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // INTRANT_LIST_HPP
