// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef INTRANT_LIST_SIMPL_HPP
#define INTRANT_LIST_SIMPL_HPP

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define INTRANT_LIST_SIMPL_HPP_CLEAR_OMIT_SAGGR
#endif

#include "IntrantList-sskel.hpp"

#include <xsde/cxx/stack.hxx>

namespace N_Data
{
  class Action_simpl: public Action_sskel
  {
    public:
    virtual void
    pre (const ::N_Data::Action&);

    // Elements.
    //
    virtual ::std::string
    title ();

    virtual bool
    delegate_present ();

    virtual ::std::string
    delegate ();

    virtual bool
    deadlineDate_present ();

    virtual ::xml_schema::date
    deadlineDate ();

    public:
    struct Action_simpl_state
    {
      const ::N_Data::Action* Action_;
    };

    Action_simpl_state Action_simpl_state_;
  };

  class ActionList_simpl: public ActionList_sskel
  {
    public:
    virtual void
    pre (const ::N_Data::ActionList&);

    // Elements.
    //
    virtual bool
    Action_next ();

    virtual const ::N_Data::Action&
    Action ();

    public:
    struct ActionList_simpl_state
    {
      const ::N_Data::ActionList* ActionList_;
      ::N_Data::ActionList::Action_const_iterator Action_;
      ::N_Data::ActionList::Action_const_iterator Action_end_;
    };

    ActionList_simpl_state ActionList_simpl_state_;
  };

  class IntrantList_simpl: public IntrantList_sskel
  {
    public:
    virtual void
    pre (const ::N_Data::IntrantList&);

    // Elements.
    //
    virtual bool
    Intrant_next ();

    virtual const ::N_Data::Intrant&
    Intrant ();

    public:
    struct IntrantList_simpl_state
    {
      const ::N_Data::IntrantList* IntrantList_;
      ::N_Data::IntrantList::Intrant_const_iterator Intrant_;
      ::N_Data::IntrantList::Intrant_const_iterator Intrant_end_;
    };

    IntrantList_simpl_state IntrantList_simpl_state_;
  };

  class Intrant_simpl: public Intrant_sskel
  {
    public:
    virtual void
    pre (const ::N_Data::Intrant&);

    // Elements.
    //
    virtual ::std::string
    title ();

    virtual bool
    description_present ();

    virtual ::std::string
    description ();

    virtual bool
    image_next ();

    virtual ::std::string
    image ();

    virtual bool
    pdf_next ();

    virtual ::std::string
    pdf ();

    virtual bool
    sound_next ();

    virtual ::std::string
    sound ();

    virtual bool
    url_next ();

    virtual ::std::string
    url ();

    virtual bool
    deadlineDate_present ();

    virtual ::xml_schema::date
    deadlineDate ();

    virtual bool
    actions_present ();

    virtual const ::N_Data::ActionList&
    actions ();

    public:
    struct Intrant_simpl_state
    {
      const ::N_Data::Intrant* Intrant_;
      ::N_Data::Intrant::image_const_iterator image_;
      ::N_Data::Intrant::image_const_iterator image_end_;
      ::N_Data::Intrant::pdf_const_iterator pdf_;
      ::N_Data::Intrant::pdf_const_iterator pdf_end_;
      ::N_Data::Intrant::sound_const_iterator sound_;
      ::N_Data::Intrant::sound_const_iterator sound_end_;
      ::N_Data::Intrant::url_const_iterator url_;
      ::N_Data::Intrant::url_const_iterator url_end_;
    };

    Intrant_simpl_state Intrant_simpl_state_;
  };
}

#ifdef INTRANT_LIST_SIMPL_HPP_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

namespace N_Data
{
  // Serializer aggregate for the IntrantList element.
  //
  class IntrantList_saggr
  {
    public:
    IntrantList_saggr ();

    void
    pre (const ::N_Data::IntrantList& x)
    {
      this->IntrantList_s_.pre (x);
    }

    void
    post ()
    {
      this->IntrantList_s_.post ();
    }

    ::N_Data::IntrantList_simpl&
    root_serializer ()
    {
      return this->IntrantList_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->IntrantList_s_._reset ();
    }

    public:
    ::N_Data::Action_simpl Action_s_;
    ::xml_schema::date_simpl date_s_;
    ::N_Data::ActionList_simpl ActionList_s_;
    ::N_Data::Intrant_simpl Intrant_s_;
    ::N_Data::IntrantList_simpl IntrantList_s_;
    ::xml_schema::string_simpl string_s_;
  };
}

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // INTRANT_LIST_SIMPL_HPP
