// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef INTRANT_LIST_SSKEL_HPP
#define INTRANT_LIST_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
namespace N_Data
{
  class Action_sskel;
  class ActionList_sskel;
  class IntrantList_sskel;
  class Intrant_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "IntrantList.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

namespace N_Data
{
  class Action_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::N_Data::Action&) = 0;

    // Elements.
    //
    virtual ::std::string
    title () = 0;

    virtual bool
    delegate_present ();

    virtual ::std::string
    delegate () = 0;

    virtual bool
    deadlineDate_present ();

    virtual ::xml_schema::date
    deadlineDate () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* title */,
                 ::xml_schema::string_sskel& /* delegate */,
                 ::xml_schema::date_sskel& /* deadlineDate */);

    // Individual element serializers.
    //
    void
    title_serializer (::xml_schema::string_sskel&);

    void
    delegate_serializer (::xml_schema::string_sskel&);

    void
    deadlineDate_serializer (::xml_schema::date_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Action_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    Action_sskel* Action_impl_;
    Action_sskel (Action_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* title_serializer_;
    ::xml_schema::string_sskel* delegate_serializer_;
    ::xml_schema::date_sskel* deadlineDate_serializer_;
  };

  class ActionList_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::N_Data::ActionList&) = 0;

    // Elements.
    //
    virtual bool
    Action_next ();

    virtual const ::N_Data::Action&
    Action () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::N_Data::Action_sskel& /* Action */);

    // Individual element serializers.
    //
    void
    Action_serializer (::N_Data::Action_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    ActionList_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    ActionList_sskel* ActionList_impl_;
    ActionList_sskel (ActionList_sskel*, void*);

    protected:
    ::N_Data::Action_sskel* Action_serializer_;
  };

  class IntrantList_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::N_Data::IntrantList&) = 0;

    // Elements.
    //
    virtual bool
    Intrant_next ();

    virtual const ::N_Data::Intrant&
    Intrant () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::N_Data::Intrant_sskel& /* Intrant */);

    // Individual element serializers.
    //
    void
    Intrant_serializer (::N_Data::Intrant_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    IntrantList_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    IntrantList_sskel* IntrantList_impl_;
    IntrantList_sskel (IntrantList_sskel*, void*);

    protected:
    ::N_Data::Intrant_sskel* Intrant_serializer_;
  };

  class Intrant_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const ::N_Data::Intrant&) = 0;

    // Elements.
    //
    virtual ::std::string
    title () = 0;

    virtual bool
    description_present ();

    virtual ::std::string
    description () = 0;

    virtual bool
    image_next ();

    virtual ::std::string
    image () = 0;

    virtual bool
    pdf_next ();

    virtual ::std::string
    pdf () = 0;

    virtual bool
    sound_next ();

    virtual ::std::string
    sound () = 0;

    virtual bool
    url_next ();

    virtual ::std::string
    url () = 0;

    virtual bool
    deadlineDate_present ();

    virtual ::xml_schema::date
    deadlineDate () = 0;

    virtual bool
    actions_present ();

    virtual const ::N_Data::ActionList&
    actions () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* title */,
                 ::xml_schema::string_sskel& /* description */,
                 ::xml_schema::string_sskel& /* image */,
                 ::xml_schema::string_sskel& /* pdf */,
                 ::xml_schema::string_sskel& /* sound */,
                 ::xml_schema::string_sskel& /* url */,
                 ::xml_schema::date_sskel& /* deadlineDate */,
                 ::N_Data::ActionList_sskel& /* actions */);

    // Individual element serializers.
    //
    void
    title_serializer (::xml_schema::string_sskel&);

    void
    description_serializer (::xml_schema::string_sskel&);

    void
    image_serializer (::xml_schema::string_sskel&);

    void
    pdf_serializer (::xml_schema::string_sskel&);

    void
    sound_serializer (::xml_schema::string_sskel&);

    void
    url_serializer (::xml_schema::string_sskel&);

    void
    deadlineDate_serializer (::xml_schema::date_sskel&);

    void
    actions_serializer (::N_Data::ActionList_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    Intrant_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    Intrant_sskel* Intrant_impl_;
    Intrant_sskel (Intrant_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* title_serializer_;
    ::xml_schema::string_sskel* description_serializer_;
    ::xml_schema::string_sskel* image_serializer_;
    ::xml_schema::string_sskel* pdf_serializer_;
    ::xml_schema::string_sskel* sound_serializer_;
    ::xml_schema::string_sskel* url_serializer_;
    ::xml_schema::date_sskel* deadlineDate_serializer_;
    ::N_Data::ActionList_sskel* actions_serializer_;
  };
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // INTRANT_LIST_SSKEL_HPP
