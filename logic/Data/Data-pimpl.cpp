// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "Data-pimpl.hpp"

#include <xsde/cxx/parser/non-validating/string-common.hxx>

namespace N_Data
{
  // RootDir_pimpl
  //

  RootDir_pimpl::
  RootDir_pimpl ()
  : RootDir_pskel (&base_impl_)
  {
  }

  void RootDir_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->RootDir_pimpl_state_.RootDir_ = ::N_Data::RootDir ();
  }

  ::N_Data::RootDir RootDir_pimpl::
  post_RootDir ()
  {
    static_cast< ::std::string& > (this->RootDir_pimpl_state_.RootDir_) = 
    this->base_impl_.post_string ();
    return this->RootDir_pimpl_state_.RootDir_;
  }

  // DataPath_pimpl
  //

  DataPath_pimpl::
  DataPath_pimpl ()
  : DataPath_pskel (&base_impl_)
  {
  }

  void DataPath_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->DataPath_pimpl_state_.DataPath_ = ::N_Data::DataPath ();
  }

  void DataPath_pimpl::
  name (const ::std::string& x)
  {
    this->DataPath_pimpl_state_.DataPath_.name (x);
  }

  ::N_Data::DataPath DataPath_pimpl::
  post_DataPath ()
  {
    static_cast< ::std::string& > (this->DataPath_pimpl_state_.DataPath_) = 
    this->base_impl_.post_string ();
    return this->DataPath_pimpl_state_.DataPath_;
  }

  // Data_pimpl
  //

  Data_pimpl::
  Data_pimpl (bool b)
  {
    this->Data_pimpl_base_ = b;
    this->Data_pimpl_state_.Data_ = 0;
  }

  Data_pimpl::
  ~Data_pimpl ()
  {
    if (!this->Data_pimpl_base_ && this->Data_pimpl_state_.Data_)
      delete this->Data_pimpl_state_.Data_;
  }

  void Data_pimpl::
  _reset ()
  {
    Data_pskel::_reset ();

    if (!this->Data_pimpl_base_ && this->Data_pimpl_state_.Data_)
    {
      delete this->Data_pimpl_state_.Data_;
      this->Data_pimpl_state_.Data_ = 0;
    }
  }

  void Data_pimpl::
  pre_impl (::N_Data::Data* x)
  {
    this->Data_pimpl_state_.Data_ = x;
  }

  void Data_pimpl::
  pre ()
  {
    ::N_Data::Data* x = new ::N_Data::Data;
    this->pre_impl (x);
  }

  void Data_pimpl::
  RootDir (const ::N_Data::RootDir& x)
  {
    this->Data_pimpl_state_.Data_->RootDir (x);
  }

  void Data_pimpl::
  DataPath (const ::N_Data::DataPath& x)
  {
    this->Data_pimpl_state_.Data_->DataPath ().push_back (x);
  }

  ::N_Data::Data* Data_pimpl::
  post_Data ()
  {
    ::N_Data::Data* r = this->Data_pimpl_state_.Data_;
    this->Data_pimpl_state_.Data_ = 0;
    return r;
  }
}

namespace N_Data
{
  // Data_paggr
  //

  Data_paggr::
  Data_paggr ()
  {
    this->DataPath_p_.parsers (this->string_p_);

    this->Data_p_.parsers (this->RootDir_p_,
                           this->DataPath_p_);
  }

  const char* Data_paggr::
  root_name ()
  {
    return "Data";
  }

  const char* Data_paggr::
  root_namespace ()
  {
    return "";
  }
}

// Begin epilogue.
//
//
// End epilogue.

