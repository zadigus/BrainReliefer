// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "IntrantList-pskel.hpp"

namespace N_Data
{
  // Action_pskel
  //

  void Action_pskel::
  title_parser (::xml_schema::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void Action_pskel::
  delegate_parser (::xml_schema::string_pskel& p)
  {
    this->delegate_parser_ = &p;
  }

  void Action_pskel::
  deadlineDate_parser (::xml_schema::date_pskel& p)
  {
    this->deadlineDate_parser_ = &p;
  }

  void Action_pskel::
  parsers (::xml_schema::string_pskel& title,
           ::xml_schema::string_pskel& delegate,
           ::xml_schema::date_pskel& deadlineDate)
  {
    this->title_parser_ = &title;
    this->delegate_parser_ = &delegate;
    this->deadlineDate_parser_ = &deadlineDate;
  }

  Action_pskel::
  Action_pskel ()
  : Action_impl_ (0),
    title_parser_ (0),
    delegate_parser_ (0),
    deadlineDate_parser_ (0)
  {
  }

  Action_pskel::
  Action_pskel (Action_pskel* impl, void*)
  : ::xsde::cxx::parser::non_validating::complex_content (impl, 0),
    Action_impl_ (impl),
    title_parser_ (0),
    delegate_parser_ (0),
    deadlineDate_parser_ (0)
  {
  }

  // ActionList_pskel
  //

  void ActionList_pskel::
  Action_parser (::N_Data::Action_pskel& p)
  {
    this->Action_parser_ = &p;
  }

  void ActionList_pskel::
  parsers (::N_Data::Action_pskel& Action)
  {
    this->Action_parser_ = &Action;
  }

  ActionList_pskel::
  ActionList_pskel ()
  : ActionList_impl_ (0),
    Action_parser_ (0)
  {
  }

  ActionList_pskel::
  ActionList_pskel (ActionList_pskel* impl, void*)
  : ::xsde::cxx::parser::non_validating::complex_content (impl, 0),
    ActionList_impl_ (impl),
    Action_parser_ (0)
  {
  }

  // IntrantList_pskel
  //

  void IntrantList_pskel::
  Intrant_parser (::N_Data::Intrant_pskel& p)
  {
    this->Intrant_parser_ = &p;
  }

  void IntrantList_pskel::
  parsers (::N_Data::Intrant_pskel& Intrant)
  {
    this->Intrant_parser_ = &Intrant;
  }

  IntrantList_pskel::
  IntrantList_pskel ()
  : IntrantList_impl_ (0),
    Intrant_parser_ (0)
  {
  }

  IntrantList_pskel::
  IntrantList_pskel (IntrantList_pskel* impl, void*)
  : ::xsde::cxx::parser::non_validating::complex_content (impl, 0),
    IntrantList_impl_ (impl),
    Intrant_parser_ (0)
  {
  }

  // Intrant_pskel
  //

  void Intrant_pskel::
  title_parser (::xml_schema::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void Intrant_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void Intrant_pskel::
  image_parser (::xml_schema::string_pskel& p)
  {
    this->image_parser_ = &p;
  }

  void Intrant_pskel::
  pdf_parser (::xml_schema::string_pskel& p)
  {
    this->pdf_parser_ = &p;
  }

  void Intrant_pskel::
  sound_parser (::xml_schema::string_pskel& p)
  {
    this->sound_parser_ = &p;
  }

  void Intrant_pskel::
  url_parser (::xml_schema::string_pskel& p)
  {
    this->url_parser_ = &p;
  }

  void Intrant_pskel::
  deadlineDate_parser (::xml_schema::date_pskel& p)
  {
    this->deadlineDate_parser_ = &p;
  }

  void Intrant_pskel::
  actions_parser (::N_Data::ActionList_pskel& p)
  {
    this->actions_parser_ = &p;
  }

  void Intrant_pskel::
  parsers (::xml_schema::string_pskel& title,
           ::xml_schema::string_pskel& description,
           ::xml_schema::string_pskel& image,
           ::xml_schema::string_pskel& pdf,
           ::xml_schema::string_pskel& sound,
           ::xml_schema::string_pskel& url,
           ::xml_schema::date_pskel& deadlineDate,
           ::N_Data::ActionList_pskel& actions)
  {
    this->title_parser_ = &title;
    this->description_parser_ = &description;
    this->image_parser_ = &image;
    this->pdf_parser_ = &pdf;
    this->sound_parser_ = &sound;
    this->url_parser_ = &url;
    this->deadlineDate_parser_ = &deadlineDate;
    this->actions_parser_ = &actions;
  }

  Intrant_pskel::
  Intrant_pskel ()
  : Intrant_impl_ (0),
    title_parser_ (0),
    description_parser_ (0),
    image_parser_ (0),
    pdf_parser_ (0),
    sound_parser_ (0),
    url_parser_ (0),
    deadlineDate_parser_ (0),
    actions_parser_ (0)
  {
  }

  Intrant_pskel::
  Intrant_pskel (Intrant_pskel* impl, void*)
  : ::xsde::cxx::parser::non_validating::complex_content (impl, 0),
    Intrant_impl_ (impl),
    title_parser_ (0),
    description_parser_ (0),
    image_parser_ (0),
    pdf_parser_ (0),
    sound_parser_ (0),
    url_parser_ (0),
    deadlineDate_parser_ (0),
    actions_parser_ (0)
  {
  }
}

#include <assert.h>

namespace N_Data
{
  // Action_pskel
  //

  void Action_pskel::
  title (const ::std::string& x)
  {
    if (this->Action_impl_)
      this->Action_impl_->title (x);
  }

  void Action_pskel::
  delegate (const ::std::string& x)
  {
    if (this->Action_impl_)
      this->Action_impl_->delegate (x);
  }

  void Action_pskel::
  deadlineDate (const ::xml_schema::date& x)
  {
    if (this->Action_impl_)
      this->Action_impl_->deadlineDate (x);
  }

  void Action_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->delegate_parser_)
      this->delegate_parser_->_reset ();

    if (this->deadlineDate_parser_)
      this->deadlineDate_parser_->_reset ();

    this->resetting_ = false;
  }

  bool Action_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "title" && ns.empty ())
    {
      if (this->title_parser_)
      {
        this->title_parser_->pre ();
        ctx.nested_parser (this->title_parser_);
      }

      return true;
    }

    if (n == "delegate" && ns.empty ())
    {
      if (this->delegate_parser_)
      {
        this->delegate_parser_->pre ();
        ctx.nested_parser (this->delegate_parser_);
      }

      return true;
    }

    if (n == "deadlineDate" && ns.empty ())
    {
      if (this->deadlineDate_parser_)
      {
        this->deadlineDate_parser_->pre ();
        ctx.nested_parser (this->deadlineDate_parser_);
      }

      return true;
    }

    return false;
  }

  bool Action_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_end_element_impl (ns, n))
      return true;

    if (n == "title" && ns.empty ())
    {
      if (this->title_parser_)
      {
        this->title (this->title_parser_->post_string ());
      }

      return true;
    }

    if (n == "delegate" && ns.empty ())
    {
      if (this->delegate_parser_)
      {
        this->delegate (this->delegate_parser_->post_string ());
      }

      return true;
    }

    if (n == "deadlineDate" && ns.empty ())
    {
      if (this->deadlineDate_parser_)
      {
        this->deadlineDate (this->deadlineDate_parser_->post_date ());
      }

      return true;
    }

    return false;
  }

  // ActionList_pskel
  //

  void ActionList_pskel::
  Action (const ::N_Data::Action& x)
  {
    if (this->ActionList_impl_)
      this->ActionList_impl_->Action (x);
  }

  void ActionList_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Action_parser_)
      this->Action_parser_->_reset ();

    this->resetting_ = false;
  }

  bool ActionList_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action_parser_->pre ();
        ctx.nested_parser (this->Action_parser_);
      }

      return true;
    }

    return false;
  }

  bool ActionList_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_end_element_impl (ns, n))
      return true;

    if (n == "Action" && ns.empty ())
    {
      if (this->Action_parser_)
      {
        this->Action (this->Action_parser_->post_Action ());
      }

      return true;
    }

    return false;
  }

  // IntrantList_pskel
  //

  void IntrantList_pskel::
  Intrant (::N_Data::Intrant* x)
  {
    if (this->IntrantList_impl_)
      this->IntrantList_impl_->Intrant (x);
  }

  void IntrantList_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Intrant_parser_)
      this->Intrant_parser_->_reset ();

    this->resetting_ = false;
  }

  bool IntrantList_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "Intrant" && ns.empty ())
    {
      if (this->Intrant_parser_)
      {
        this->Intrant_parser_->pre ();
        ctx.nested_parser (this->Intrant_parser_);
      }

      return true;
    }

    return false;
  }

  bool IntrantList_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_end_element_impl (ns, n))
      return true;

    if (n == "Intrant" && ns.empty ())
    {
      if (this->Intrant_parser_)
      {
        this->Intrant (this->Intrant_parser_->post_Intrant ());
      }

      return true;
    }

    return false;
  }

  // Intrant_pskel
  //

  void Intrant_pskel::
  title (const ::std::string& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->title (x);
  }

  void Intrant_pskel::
  description (const ::std::string& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->description (x);
  }

  void Intrant_pskel::
  image (const ::std::string& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->image (x);
  }

  void Intrant_pskel::
  pdf (const ::std::string& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->pdf (x);
  }

  void Intrant_pskel::
  sound (const ::std::string& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->sound (x);
  }

  void Intrant_pskel::
  url (const ::std::string& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->url (x);
  }

  void Intrant_pskel::
  deadlineDate (const ::xml_schema::date& x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->deadlineDate (x);
  }

  void Intrant_pskel::
  actions (::N_Data::ActionList* x)
  {
    if (this->Intrant_impl_)
      this->Intrant_impl_->actions (x);
  }

  void Intrant_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->title_parser_)
      this->title_parser_->_reset ();

    if (this->description_parser_)
      this->description_parser_->_reset ();

    if (this->image_parser_)
      this->image_parser_->_reset ();

    if (this->pdf_parser_)
      this->pdf_parser_->_reset ();

    if (this->sound_parser_)
      this->sound_parser_->_reset ();

    if (this->url_parser_)
      this->url_parser_->_reset ();

    if (this->deadlineDate_parser_)
      this->deadlineDate_parser_->_reset ();

    if (this->actions_parser_)
      this->actions_parser_->_reset ();

    this->resetting_ = false;
  }

  bool Intrant_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;

    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "title" && ns.empty ())
    {
      if (this->title_parser_)
      {
        this->title_parser_->pre ();
        ctx.nested_parser (this->title_parser_);
      }

      return true;
    }

    if (n == "description" && ns.empty ())
    {
      if (this->description_parser_)
      {
        this->description_parser_->pre ();
        ctx.nested_parser (this->description_parser_);
      }

      return true;
    }

    if (n == "image" && ns.empty ())
    {
      if (this->image_parser_)
      {
        this->image_parser_->pre ();
        ctx.nested_parser (this->image_parser_);
      }

      return true;
    }

    if (n == "pdf" && ns.empty ())
    {
      if (this->pdf_parser_)
      {
        this->pdf_parser_->pre ();
        ctx.nested_parser (this->pdf_parser_);
      }

      return true;
    }

    if (n == "sound" && ns.empty ())
    {
      if (this->sound_parser_)
      {
        this->sound_parser_->pre ();
        ctx.nested_parser (this->sound_parser_);
      }

      return true;
    }

    if (n == "url" && ns.empty ())
    {
      if (this->url_parser_)
      {
        this->url_parser_->pre ();
        ctx.nested_parser (this->url_parser_);
      }

      return true;
    }

    if (n == "deadlineDate" && ns.empty ())
    {
      if (this->deadlineDate_parser_)
      {
        this->deadlineDate_parser_->pre ();
        ctx.nested_parser (this->deadlineDate_parser_);
      }

      return true;
    }

    if (n == "actions" && ns.empty ())
    {
      if (this->actions_parser_)
      {
        this->actions_parser_->pre ();
        ctx.nested_parser (this->actions_parser_);
      }

      return true;
    }

    return false;
  }

  bool Intrant_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    typedef ::xsde::cxx::parser::non_validating::complex_content base;
    if (base::_end_element_impl (ns, n))
      return true;

    if (n == "title" && ns.empty ())
    {
      if (this->title_parser_)
      {
        this->title (this->title_parser_->post_string ());
      }

      return true;
    }

    if (n == "description" && ns.empty ())
    {
      if (this->description_parser_)
      {
        this->description (this->description_parser_->post_string ());
      }

      return true;
    }

    if (n == "image" && ns.empty ())
    {
      if (this->image_parser_)
      {
        this->image (this->image_parser_->post_string ());
      }

      return true;
    }

    if (n == "pdf" && ns.empty ())
    {
      if (this->pdf_parser_)
      {
        this->pdf (this->pdf_parser_->post_string ());
      }

      return true;
    }

    if (n == "sound" && ns.empty ())
    {
      if (this->sound_parser_)
      {
        this->sound (this->sound_parser_->post_string ());
      }

      return true;
    }

    if (n == "url" && ns.empty ())
    {
      if (this->url_parser_)
      {
        this->url (this->url_parser_->post_string ());
      }

      return true;
    }

    if (n == "deadlineDate" && ns.empty ())
    {
      if (this->deadlineDate_parser_)
      {
        this->deadlineDate (this->deadlineDate_parser_->post_date ());
      }

      return true;
    }

    if (n == "actions" && ns.empty ())
    {
      if (this->actions_parser_)
      {
        this->actions (this->actions_parser_->post_ActionList ());
      }

      return true;
    }

    return false;
  }
}

// Begin epilogue.
//
//
// End epilogue.

